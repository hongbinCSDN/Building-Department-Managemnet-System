//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MWMS2.Entity
{
    using MWMS2.Areas.Registration.Models;
    using MWMS2.Utility;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;

    [MetadataType(typeof(C_COMP_APPLICANT_INFO_MASTER_Extend))] public partial class C_COMP_APPLICANT_INFO_MASTER
    {
        public bool EFORM { get; set; }
        public C_COMP_APPLICANT_INFO_MASTER MergeByList(List<C_COMP_APPLICANT_INFO_MASTER> list)
        {

            if (list == null) return this;
            C_COMP_APPLICANT_INFO_MASTER v = list.Where(o => o.UUID == this.UUID).FirstOrDefault();
            if (v == null) return this;
            /*if(v.C_APPLICANT != null)
            {
                if (C_APPLICANT == null) C_APPLICANT = new C_APPLICANT();
                C_APPLICANT.HKID = v.C_APPLICANT.HKID;
                C_APPLICANT.PASSPORT_NO = v.C_APPLICANT.PASSPORT_NO;
                C_APPLICANT.SURNAME = v.C_APPLICANT.SURNAME;
                C_APPLICANT.GIVEN_NAME_ON_ID = v.C_APPLICANT.GIVEN_NAME_ON_ID;
                C_APPLICANT.GENDER = v.C_APPLICANT.GENDER;
                C_APPLICANT.CHINESE_NAME = v.C_APPLICANT.CHINESE_NAME;
                C_APPLICANT.TITLE_ID = v.C_APPLICANT.C_S_SYSTEM_VALUE?.UUID;
                del ma
            }*/

            APPLICATION_DATE = v?.APPLICATION_DATE;
            APPLICATION_FORM_ID = v?.APPLICATION_FORM_ID;
            APPROVED_DATE = v?.APPROVED_DATE;

            APPROVED_BY = v?.APPROVED_BY;
            WITHDRAW_DATE = v?.WITHDRAW_DATE;
            REFUSE_DATE = v?.REFUSE_DATE;
            REFUSE_BY = v?.REFUSE_BY;

            TypeAApply = v?.TypeAApply;
            TypeBApply = v?.TypeBApply;
            TypeCApply = v?.TypeCApply;
            TypeDApply = v?.TypeDApply;
            TypeEApply = v?.TypeEApply;
            TypeFApply = v?.TypeFApply;
            TypeGApply = v?.TypeGApply;


            TypeAApprove = v?.TypeAApprove;
            TypeBApprove = v?.TypeBApprove;
            TypeCApprove = v?.TypeCApprove;
            TypeDApprove = v?.TypeDApprove;
            TypeEApprove = v?.TypeEApprove;
            TypeFApprove = v?.TypeFApprove;
            TypeGApprove = v?.TypeGApprove;
            EFORM = v.EFORM;

            return this;
        }
        public Dictionary<string, string> TypeApply
        {
            get
            {
                return new Dictionary<string, string>() {
                    { "Type A", TypeAApply },
                    { "Type B", TypeBApply },
                    { "Type C", TypeCApply },
                    { "Type D", TypeDApply },
                    { "Type E", TypeEApply },
                    { "Type F", TypeFApply },
                    { "Type G", TypeGApply }
                };
            }
        }

        public Dictionary<string, string> TypeApprove
        {
            get
            {
                return new Dictionary<string, string>() {
                    { "Type A", TypeAApprove },
                    { "Type B", TypeBApprove },
                    { "Type C", TypeCApprove },
                    { "Type D", TypeDApprove },
                    { "Type E", TypeEApprove },
                    { "Type F", TypeFApprove },
                    { "Type G", TypeGApprove }
                };
            }
        }
        public string TypeAApply { get; set; }
        public string TypeBApply { get; set; }
        public string TypeCApply { get; set; }
        public string TypeDApply { get; set; }
        public string TypeEApply { get; set; }
        public string TypeFApply { get; set; }
        public string TypeGApply { get; set; }

        public string TypeAApprove { get; set; }
        public string TypeBApprove { get; set; }
        public string TypeCApprove { get; set; }
        public string TypeDApprove { get; set; }
        public string TypeEApprove { get; set; }
        public string TypeFApprove { get; set; }
        public string TypeGApprove { get; set; }

        public string APPLY_I
        {
            get
            {
                string r = "";
                if ("1".Equals(TypeAApply)) r += "A, "; if ("1".Equals(TypeBApply)) r += "B, ";
                if ("1".Equals(TypeCApply)) r += "C, "; if ("1".Equals(TypeDApply)) r += "D, ";
                if ("1".Equals(TypeEApply)) r += "E, "; if ("1".Equals(TypeFApply)) r += "F, ";
                if ("1".Equals(TypeGApply)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }
        public string APPLY_II
        {
            get
            {
                string r = "";
                if ("2".Equals(TypeAApply)) r += "A, "; if ("2".Equals(TypeBApply)) r += "B, ";
                if ("2".Equals(TypeCApply)) r += "C, "; if ("2".Equals(TypeDApply)) r += "D, ";
                if ("2".Equals(TypeEApply)) r += "E, "; if ("2".Equals(TypeFApply)) r += "F, ";
                if ("2".Equals(TypeGApply)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }
        public string APPLY_III
        {
            get
            {
                string r = "";
                if ("3".Equals(TypeAApply)) r += "A, "; if ("3".Equals(TypeBApply)) r += "B, ";
                if ("3".Equals(TypeCApply)) r += "C, "; if ("3".Equals(TypeDApply)) r += "D, ";
                if ("3".Equals(TypeEApply)) r += "E, "; if ("3".Equals(TypeFApply)) r += "F, ";
                if ("3".Equals(TypeGApply)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }




        public string APPROVE_I
        {
            get
            {
                string r = "";
                if ("1".Equals(TypeAApprove)) r += "A, "; if ("1".Equals(TypeBApprove)) r += "B, ";
                if ("1".Equals(TypeCApprove)) r += "C, "; if ("1".Equals(TypeDApprove)) r += "D, ";
                if ("1".Equals(TypeEApprove)) r += "E, "; if ("1".Equals(TypeFApprove)) r += "F, ";
                if ("1".Equals(TypeGApprove)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }
        public string APPROVE_II
        {
            get
            {
                string r = "";
                if ("2".Equals(TypeAApprove)) r += "A, "; if ("2".Equals(TypeBApprove)) r += "B, ";
                if ("2".Equals(TypeCApprove)) r += "C, "; if ("2".Equals(TypeDApprove)) r += "D, ";
                if ("2".Equals(TypeEApprove)) r += "E, "; if ("2".Equals(TypeFApprove)) r += "F, ";
                if ("2".Equals(TypeGApprove)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }
        public string APPROVE_III
        {
            get
            {
                string r = "";
                if ("3".Equals(TypeAApprove)) r += "A, "; if ("3".Equals(TypeBApprove)) r += "B, ";
                if ("3".Equals(TypeCApprove)) r += "C, "; if ("3".Equals(TypeDApprove)) r += "D, ";
                if ("3".Equals(TypeEApprove)) r += "E, "; if ("3".Equals(TypeFApprove)) r += "F, ";
                if ("3".Equals(TypeGApprove)) r += "G, ";
                if (r.Length > 2) r = r.Substring(0, r.Length - 2);
                return r;
            }
        }





    }

    public partial class C_COMP_APPLICANT_INFO_MASTER_Extend
    {
        [Display(Name = "Application Date")]
        public Nullable<System.DateTime> APPLICATION_DATE { get; set; }
        [Display(Name = "Application Form")]
        public string APPLICATION_FORM_ID { get; set; }
        [Display(Name = "Approved Date")]
        public Nullable<System.DateTime> APPROVED_DATE { get; set; }
        [Display(Name = "Approved by")]
        public string APPROVED_BY { get; set; }

        [Display(Name = "Withdrawn Date")]
        public Nullable<System.DateTime> WITHDRAW_DATE { get; set; }
        [Display(Name = "Refused Date")]
        public Nullable<System.DateTime> REFUSE_DATE { get; set; }
        [Display(Name = "Refused by")]
        public string REFUSE_BY { get; set; }
       
    }
}